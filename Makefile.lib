## this file describe how we build libs
ROOT?=.

## third-party lib
$(TABIX_INC) $(TABIX_LIB):
	$(MAKE) -C $(ROOT)/third tabix
$(EIGEN_INC) $(EIGEN_LIB):
	$(MAKE) -C $(ROOT)/third eigen
$(PCRE_INC) $(PCRE_LIB):
	$(MAKE) -C $(ROOT)/third pcre
$(GSL_INC) $(GSL_LIB):
	$(MAKE) -C $(ROOT)/third gsl
$(NLOPT_INC) $(NLOPT_LIB):
	$(MAKE) -C $(ROOT)/third nlopt
$(ZLIB_INC) $(ZLIB_LIB):
	$(MAKE) -C $(ROOT)/third zlib 
$(BZIP2_INC) $(BZIP2_LIB):
	$(MAKE) -C $(ROOT)/third bzip2
$(BCF_INC) $(BCF_LIB) $(SAMTOOLS_INC) $(SAMTOOLS_LIB):
	$(MAKE) -C $(ROOT)/third samtools
$(RAPIDJSON_INC):
	$(MAKE) -C $(ROOT)/third rapidjson
$(SQLITE_INC) $(SQLITE_LIB):
	$(MAKE) -C $(ROOT)/third sqlite
$(ZSTD_INC) $(ZSTD_LIB):
	$(MAKE) -C $(ROOT)/third zstd

## our libs
$(BASE_LIB):
	$(MAKE) -C $(ROOT)/base $(MAKECMDGOALS)
$(BASE_LIB_DBG):
	$(MAKE) -C $(ROOT)/base $(MAKECMDGOALS)
$(VCF_LIB):
	$(MAKE) -C $(ROOT)/libVcf $(MAKECMDGOALS)
$(VCF_LIB_DBG):
	$(MAKE) -C $(ROOT)/libVcf $(MAKECMDGOALS)
$(BGEN_LIB):
	$(MAKE) -C $(ROOT)/libBgen $(MAKECMDGOALS)
$(BGEN_LIB_DBG):
	$(MAKE) -C $(ROOT)/libBgen $(MAKECMDGOALS)
$(REGRESSION_LIB): $(EIGEN_INC)
	$(MAKE) -C $(ROOT)/regression $(MAKECMDGOALS)
$(REGRESSION_LIB_DBG):
	$(MAKE) -C $(ROOT)/regression $(MAKECMDGOALS)
$(GONCALO_LIB):
	$(MAKE) -C $(ROOT)/libsrc $(MAKECMDGOALS)
$(GONCALO_LIB_DBG):
	$(MAKE) -C $(ROOT)/libsrc $(MAKECMDGOALS)

## rule to make lib
# to build lib, we will use reverse order
# so third party lib is build first.
reverse = $(if $(1),$(call reverse,$(wordlist 2,$(words $(1)),$(1)))) $(firstword $(1))
LIBS:=$(call reverse,$(LIB))
LIBS_DBG:=$(call reverse,$(LIB_DBG))

.PHONY: lib lib-dbg
lib:$(LIBS)
lib-dbg:$(LIB_DBG)

